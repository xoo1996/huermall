package cn.edu.hdu.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.DocAttributeSet;
import javax.print.attribute.HashDocAttributeSet;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import com.zlzkj.app.util.LogStringBuilder;
import com.zlzkj.core.base.BaseController;

import cn.edu.hdu.Code.GlobalParam;
import cn.edu.hdu.Code.UrlCode;
import cn.edu.hdu.config.webSend;
import cn.edu.hdu.pojo.Account;
import cn.edu.hdu.pojo.Battery;
import cn.edu.hdu.pojo.MemBat;
import cn.edu.hdu.pojo.Member;
import cn.edu.hdu.pojo.Store;
import cn.edu.hdu.printpdf.PrintPdf;
import cn.edu.hdu.service.AccountService;
import cn.edu.hdu.service.BatteryService;
import cn.edu.hdu.service.StoreService;
import cn.edu.hdu.service.impl.BatEventServiceImpl;
import cn.edu.hdu.service.impl.BatteryServiceImpl;
import cn.edu.hdu.service.impl.GiftServiceImpl;
import cn.edu.hdu.service.impl.GlobalCfgServiceImpl;
import cn.edu.hdu.service.impl.MemBatServiceImpl;
import cn.edu.hdu.service.impl.MemberServiceImpl;
import cn.edu.hdu.service.impl.ScoreServiceImpl;
import cn.edu.hdu.service.impl.StoreServiceImpl;
import cn.edu.hdu.util.DataUtil;
import cn.edu.hdu.util.FileUtil;
import cn.edu.hdu.Code.UrlCode;

import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;

import java.io.File;
import java.io.IOException;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Map;

import org.junit.Test;

import com.itextpdf.forms.PdfAcroForm;
import com.itextpdf.forms.fields.PdfFormField;
import com.itextpdf.kernel.color.Color;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfReader;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.border.SolidBorder;
import com.itextpdf.layout.element.Paragraph;

//新增
@Controller
@RequestMapping(value = "membat")
public class MemBatController extends BaseController {
	private static Logger logger = Logger.getLogger(MemberController.class);

	@Resource
	private LogStringBuilder lsb;
	@Resource
	private AccountService accountService;
	@Resource
	private MemberServiceImpl memberService;
	@Resource
	private GlobalCfgServiceImpl globalCfgService;
	@Resource
	private GiftServiceImpl giftService;
	@Resource
	private BatteryServiceImpl battService;
	@Resource
	private ScoreServiceImpl scoreService;
	@Resource
	private MemBatServiceImpl memBatService;
	@Resource
	private BatEventServiceImpl batEventService;
	@Resource
	private StoreServiceImpl storeService;

	/**
	 * 获取会员列表
	 * 
	 * @param memberName
	 * @param memberNo
	 * @param memberPhone
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = { "/membatlist" })
	public String memBatList(String memberId, HttpServletRequest request, HttpServletResponse response) {
		if (request.getMethod().equals("POST")) {

			if ((memberId == null || memberId.equals(""))) {
				return null;
			}

			logger.info(lsb.append("memberId", memberId));
			Account account = (Account) request.getSession().getAttribute("account");
			int rows = DataUtil.getPage(request.getParameter("rows"));
			int page = DataUtil.getPage(request.getParameter("page"));

			return ajaxReturn(response, memBatService.getMemBatList(memberId, rows, page, account.getAccount()));

		} else {
			return "adminPage/member/memberlist";
		}
	}

	/*
	 * @RequestMapping(value={"/membatlist_admin"}) public String
	 * memBatListAdmin(String memberName,String memberNo,String
	 * memberPhone,String storeName, Model model,HttpServletRequest request,
	 * HttpServletResponse response) { if(request.getMethod().equals("POST")){
	 * //参数记录 logger.info(lsb.method() + lsb.append("memberName", memberName) +
	 * lsb.append("memberNo", memberNo) + lsb.append("memberPhone",
	 * memberPhone)); int rows = DataUtil.getPage(request.getParameter("rows"));
	 * int page = DataUtil.getPage(request.getParameter("page")); return
	 * ajaxReturn(response,memBatService.getMemBatListAdmin(memberName,
	 * memberNo, memberPhone,storeName,rows,page)); }else{
	 * model.addAttribute("store", accountService.getAjaxStore()); return
	 * "adminPage/member/memberlist_admin"; } }
	 */

	/**
	 * 电池领取
	 * 
	 * @param account
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "get_bat")
	public String getBat(Long id, Long getBatNum, String batteryType, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		if (request.getMethod().equals("GET")) {
			model.addAttribute("memberId", id);
			return "adminPage/member/get_bat";
		} else {
			try {
				MemBat memBat = memBatService.findMemBatById(id);
				if (memBat.getBatteryReQty() > 0) {
					int rows = DataUtil.getPage(request.getParameter("rows"));
					int page = DataUtil.getPage(request.getParameter("page"));

					Account account = (Account) request.getSession().getAttribute("account");
					batEventService.record(memBat.getMemberId(), account.getAccount(), memBat.getStoreNo(),
							memBat.getBatteryType(), getBatNum);
					// System.out.println(account.getAccount()+"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
					memBatService.getBat(id, getBatNum);
					return ajaxReturn(response,
							memBatService.getMemBatList(memBat.getMemberId(), rows, page, account.getAccount()));
				} else {
					return ajaxReturn(response, null, "电池数量不足", 0);
				}

			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return ajaxReturn(response, null, "系统错误", 0);
			}
		}
	}

	/*     *//**
				 * 电池领取打印凭证
				 * 
				 * @param
				 * @param
				 * @param
				 * @return
				 *//*
				 * @RequestMapping(value="print_pdf") public String
				 * printPdf(Long id ,Long getBatNum,String batteryType,Model
				 * model,HttpServletRequest request, HttpServletResponse
				 * response){ try { String fileName = "D:/huierbatpdf.pdf"; //
				 * pdf模板 FileInputStream input = new FileInputStream(new
				 * File(fileName));
				 * 
				 * PdfReader reader = new PdfReader(input); PdfStamper stamper =
				 * new PdfStamper(reader, new
				 * FileOutputStream("D:/contract.pdf")); AcroFields form =
				 * stamper.getAcroFields(); fillData(form, data());
				 * stamper.setFormFlattening(true); Image image =
				 * Image.getInstance("D:/testPhoto.jpg"); image.scaleToFit(100,
				 * 125); PdfContentByte content=null; int
				 * pageCount=reader.getNumberOfPages();//获取PDF页数
				 * System.out.println("pageCount="+pageCount); content
				 * =stamper.getOverContent(pageCount);
				 * image.setAbsolutePosition(100, 700); content.addImage(image);
				 * stamper.close(); reader.close();
				 * 
				 * return ajaxReturn(response,null,"测试运行到此处",0);
				 * 
				 * } catch (Exception e) { // TODO Auto-generated catch block
				 * e.printStackTrace(); return
				 * ajaxReturn(response,null,"系统错误",0); } }
				 * 
				 * 
				 * public static void fillData(AcroFields fields,
				 * HashMap<String, String> hashMap) throws IOException,
				 * DocumentException { for (String key : hashMap.keySet()) {
				 * String value = hashMap.get(key);
				 * System.out.println(key+"= "+fields.getField(key)+" value="
				 * +value); fields.setField(key, value); } }
				 * 
				 * public static HashMap<String, String> data() {
				 * HashMap<String, String> data = new HashMap<String, String>();
				 * data.put("testbd", "qwerqer"); data.put("idCard", "xxxxxx");
				 * data.put("userName", "xxxx"); data.put("address", "12");
				 * data.put("telephone", "123456"); data.put("signName","xxx");
				 * return data; }
				 */

	/*
	 * @RequestMapping(value="print_pdf") public String printPdf(Long id ,Long
	 * getBatNum,String batteryType,Model model,HttpServletRequest request,
	 * HttpServletResponse response){ try { String newPDFPath
	 * ="D:/ceshipdf001.pdf";
	 * 
	 * PdfFont font = PdfFontFactory.createFont("STSongStd-Light",
	 * "UniGB-UCS2-H", false);
	 * 
	 * PdfWriter writer = new PdfWriter(new FileOutputStream(newPDFPath));
	 * //Initialize PDF document PdfDocument pdf = new PdfDocument(writer);
	 * Document document = new Document(pdf);
	 * 
	 * Paragraph p =new Paragraph("你好,世界！hello word!"); p.setFont(font);
	 * p.setFontSize(12); p.setBorder(new SolidBorder(Color.BLACK,0.5f));
	 * document.add(p);
	 * 
	 * document.close(); writer.close(); pdf.close();
	 * 
	 * return ajaxReturn(response,null,"测试运行到此处",0);
	 * 
	 * } catch (Exception e) { // TODO Auto-generated catch block
	 * e.printStackTrace(); return ajaxReturn(response,null,"系统错误",0); } }
	 */

	// @RequestMapping(value="print_pdf")
	// public String printPdf(Long id ,Long getBatNum,String batteryType,Model
	// model,HttpServletRequest request, HttpServletResponse response){
	// MemBat memBat=memBatService.findMemBatById(id);
	// PrintPdf printPdf = new PrintPdf();
	// String flag = printPdf.printPdf(id, getBatNum, batteryType,memBat);
	// if (flag == "true"){
	// return ajaxReturn(response,null,"打印成功！",0);
	// }
	// else
	// return ajaxReturn(response,null,"打印失败！",0);
	//
	// }
	//

	@RequestMapping(value = "print_pdf")
	public String printPdf(Long id, Long getBatNum, String batteryType, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		try {
			MemBat memBat = memBatService.findMemBatById(id);
			String batType = memBat.getBatteryType();
			Account account = (Account) request.getSession().getAttribute("account");
			String getStore = account.getAccount();
			Store store = storeService.findStoreByGctId(getStore);
			Battery battery = battService.getBatteryByType(batType);

			String memBatId = memBat.getMemberId();
			String printName = memberService.findNameById(Long.parseLong(memBatId));

			PrintPdf printPdf = new PrintPdf();
			String randnm = printPdf.printPdf(printName, id, getBatNum, batteryType, memBat, battery, store, request);

			// FileUtil.downloadLocal(response, "newhuierbatpdf.pdf", request.
			// getSession().getServletContext().getRealPath("file")+"/newhuierbatpdf.pdf");
			// FileUtil.downloadLocal(response, "newhuierbatpdf.pdf", request.
			// getSession().getServletContext().getRealPath("file")+"\\newhuierbatpdf.pdf");
			// 下载
			// FileUtil.deleteFileByFilePath(request.
			// getSession().getServletContext().getRealPath("file")+"\\newhuierbatpdf.pdf");

			// System.out.println(request.getRemotePort()+"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"+request.getLocalPort());
			String myport = String.valueOf(request.getLocalPort());
			String myip = InetAddress.getLocalHost().getHostAddress();
			// System.out.println(InetAddress.getLocalHost().getHostAddress()+"@@@@@@@@@@@@@@@@@@@");

			return ajaxReturn(response, null, "http://" + myip + ":" + myport + "/docs/BatEvi/BatEvi" + randnm + ".pdf",
					1);

		} catch (Exception e) {
			e.printStackTrace();
			return ajaxReturn(response, null, "失败", 0);
		}

	}

	/**
	 * 积分事件列表
	 * 
	 * @param model
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = { "/bat_event_list" })
	public String scoreEventlist(String memberName, String memberNo, String memberPhone, String storeName, Model model,
			HttpServletRequest request, HttpServletResponse response) {
		if (request.getMethod().equals("POST")) {
			String page = request.getParameter("page");
			String rowNumber = request.getParameter("rows");
			Account account = (Account) request.getSession().getAttribute("account");
			String accId = account.getAccount();
			String isAllStore = account.getRole().getAllStore();
			// log
			logger.info(lsb.method() + lsb.append("memberName", memberName) + lsb.append("memberNo", memberNo)
					+ lsb.append("memberPhone", memberPhone) + lsb.append("storeName", storeName)
					+ lsb.append("accId", accId) + lsb.append("isAllStore", isAllStore));

			// 总部或超级管理员账号，查询时不需要操作账户限制
			if (isAllStore.equals(GlobalParam.ALL_STORE_YES))
				accId = null;
			return ajaxReturn(response, batEventService.getBatEventList(null, memberName, memberNo, memberPhone,
					storeName, page, rowNumber, accId));
		} else {
			Account account = (Account) request.getSession().getAttribute("account");
			String isAllStore = account.getRole().getAllStore();
			model.addAttribute("isadmin", false);
			if (isAllStore.equals(GlobalParam.ALL_STORE_YES)) {
				model.addAttribute("isadmin", true);
			}
			return "adminPage/member/bat_event_list";
		}
	}

}
